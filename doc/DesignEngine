My Design Engine User Guide
===========================
Bensingh Beno <igenartist@gmail.com>
:Author Initials: BB
:toc:
:icons:
:numbered:
:website: http://asciidoc.org/

Introduction
------------
Design Engine is my most fruitful contribution to the Internet Community of Software and Embedded Linux System Lovers.

In this site you may find some useful pieces of information for you to kick start your understanding of becoming a good Embedded System Architect.

Tools that can ignite you to start in the right postion and move forward in the right direction.

All of it comes from my personal experience in Embedded Linux Software and Hardware development for around 9 years since my high school.

.My Motivation
**********************************************************************
 A spark of light that ignites a fire in you..

 Let it glow, let it show your passion so true..
 
 Start it may with tiny little actions..
 
 Acheive it may, In stellar proportions!!
**********************************************************************


[[X6]]
Getting Started
---------------

Will be added soon.. Promise :)

[[X6]]
Making GUI Application work with Docker Container
-------------------------------------------------

If you are using my git design-engine repository & my docker workbook : benubuntuworkbook,

Step1 - Start container with port forwarding to host,
    docker run -p 5905:5901 -it -w '/home/ben' bensinghbeno/benubuntuworkbook bash

Step2 - Set display variable as,
    export DISPLAY=:1
    
Step3 - Start vncserver & run any app (eg: Firefox) as,
    vncserver :1
    
Step4 - Connect any vnc client and see the result
    ip   : 127.0.0.1
    port : 5905


[[X6]]
[[X6]]
Making void main() work with GCC 
--------------------------------

void main() in *.cpp files can only be compiled with gcc compiler in the command line by the flag "-xc"
This tells the compiler not to use the "cplusplus backend". cplusplus backend or c++ compiler requires int main() as standard.

 gcc -xc -std=c89  main.cpp

 
[[X6]]
Legacy C Shared library Build & Run
-----------------------------------

 cd design-engine/projects/linux/gcc_legacy
 
 gcc -c -fpic  displayconsole.c
 
 gcc -shared -o libdisplayconsole.so displayconsole.o
 
 gcc -o gcclegacyapp.out main.c -L. -ldisplayconsole
 
 ./gcclegacyapp.out 
 displayOnConsole = Hello gcc legacy c code 
 
 
[[X6]]
Building & Installing linux packages from source for arm targets
----------------------------------------------------------------
TBC
 
[[X6]]
System Performance Testing
--------------------------
It's an inevitable need for any system to be evaluated for performance under heavy resource load.
Resources may include CPU/MEMORY/DISK IO e.t.c.

The stress tool  is a very handy one to do that.


Download the stress tool from here - https://people.seas.harvard.edu/~apw/stress/ 

Follow "Building linux packages from source for arm targets" & create the package

Copy & install the package using command,
    TBC

Run command as below:

  stress --cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 10s 

Where:
-c, --cpu N	    spawn N workers spinning on sqrt()
-i, --io N	    spawn N workers spinning on sync()
-m, --vm N	    spawn N workers spinning on malloc()/free()
--vm-bytes B	malloc B bytes per vm worker (default is 256MB)
-t, --timeout N	timeout after N seconds  

Now perform/test/use any application as desired and observe the impact.
    