/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.v20140411.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/

#include <sstream>
#include <v1/commonapi/someip/heartbeatStubDefault.hpp>

class heartbeatStubImpl : public v1::commonapi::someip::heartbeatStubDefault {
public:
    heartbeatStubImpl();
    virtual ~heartbeatStubImpl();
    virtual void echo_Int8(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t input, int8_t& output);
    virtual void echo_Int8(int8_t input, int8_t& output);

    virtual void echo_Int16(const std::shared_ptr<CommonAPI::ClientId> clientId, int16_t input, int16_t& output);
    virtual void echo_Int16(int16_t input, int16_t& output);

    virtual void echo_Int32(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t input, int32_t& output);
    virtual void echo_Int32(int32_t input, int32_t& output);

    virtual void echo_Int64(const std::shared_ptr<CommonAPI::ClientId> clientId, int64_t input, int64_t& output);
    virtual void echo_Int64(int64_t input, int64_t& output);

    virtual void echo_UInt8(const std::shared_ptr<CommonAPI::ClientId> clientId, uint8_t input, uint8_t& output);
    virtual void echo_UInt8(uint8_t input, uint8_t& output);

    virtual void echo_UInt16(const std::shared_ptr<CommonAPI::ClientId> clientId, uint16_t input, uint16_t& output);
    virtual void echo_UInt16(uint16_t input, uint16_t& output);

    virtual void echo_UInt32(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t input, uint32_t& output);
    virtual void echo_UInt32(uint32_t input, uint32_t& output);

    virtual void echo_UInt64(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t input, uint64_t& output);
    virtual void echo_UInt64(uint64_t input, uint64_t& output);

    virtual void echo_Boolean(const std::shared_ptr<CommonAPI::ClientId> clientId, bool input, bool& output);
    virtual void echo_Boolean(bool input, bool& output);

    virtual void echo_Double(const std::shared_ptr<CommonAPI::ClientId> clientId, double input, double& output);
    virtual void echo_Double(double input, double& output);

    virtual void echo_Float(const std::shared_ptr<CommonAPI::ClientId> clientId, float input, float& output);
    virtual void echo_Float(float input, float& output);

    virtual void in_Only(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t input);
    virtual void in_Only(int8_t input);

    virtual void out_Only(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t& out_only);
    virtual void out_Only(int8_t& out_only);

    virtual void call_Only(const std::shared_ptr<CommonAPI::ClientId> clientId);
    virtual void call_Only();

private:
    int8_t out_only_;
};
