/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 2.1.5.v20140411.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <iostream>

#include "heartbeatStubImpl.hpp"

heartbeatStubImpl::heartbeatStubImpl() :
    out_only_(0) {

}

heartbeatStubImpl::~heartbeatStubImpl() {

}

void heartbeatStubImpl::echo_Int8(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t input, int8_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_Int8(int8_t input, int8_t& output) {

}

void heartbeatStubImpl::echo_Int16(const std::shared_ptr<CommonAPI::ClientId> clientId, int16_t input, int16_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_Int16(int16_t input, int16_t& output) {

}

void heartbeatStubImpl::echo_Int32(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t input, int32_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_Int32(int32_t input, int32_t& output) {

}

void heartbeatStubImpl::echo_Int64(const std::shared_ptr<CommonAPI::ClientId> clientId, int64_t input, int64_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_Int64(int64_t input, int64_t& output) {

}

void heartbeatStubImpl::echo_UInt8(const std::shared_ptr<CommonAPI::ClientId> clientId, uint8_t input, uint8_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_UInt8(uint8_t input, uint8_t& output) {

}

void heartbeatStubImpl::echo_UInt16(const std::shared_ptr<CommonAPI::ClientId> clientId, uint16_t input, uint16_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_UInt16(uint16_t input, uint16_t& output) {

}

void heartbeatStubImpl::echo_UInt32(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t input, uint32_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_UInt32(uint32_t input, uint32_t& output) {

}

void heartbeatStubImpl::echo_UInt64(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t input, uint64_t& output) {
    output = input;
}

void heartbeatStubImpl::echo_UInt64(uint64_t input, uint64_t& output) {

}

void heartbeatStubImpl::echo_Boolean(const std::shared_ptr<CommonAPI::ClientId> clientId, bool input, bool& output) {
    output = input;
}

void heartbeatStubImpl::echo_Boolean(bool input, bool& output) {

}

void heartbeatStubImpl::echo_Double(const std::shared_ptr<CommonAPI::ClientId> clientId, double input, double& output) {
    output = input;
}

void heartbeatStubImpl::echo_Double(double input, double& output) {

}

void heartbeatStubImpl::echo_Float(const std::shared_ptr<CommonAPI::ClientId> clientId, float input, float& output) {
    output = input;
}

void heartbeatStubImpl::echo_Float(float input, float& output) {

}

void heartbeatStubImpl::in_Only(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t in_only) {
    std::cout << (int)in_only << std::endl;
}

void heartbeatStubImpl::in_Only(int8_t in_only) {

}

void heartbeatStubImpl::out_Only(const std::shared_ptr<CommonAPI::ClientId> clientId, int8_t& out_only) {
    out_only = out_only_;
    out_only_++;
}

void heartbeatStubImpl::out_Only(int8_t& out_only) {

}

void heartbeatStubImpl::call_Only(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    std::cout << "method call_only called" << std::endl;
}

void heartbeatStubImpl::call_Only() {

}
